/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/search/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Get Search Results
     * @description Returns search results for given search string.
     *     :return: List of search results
     */
    post: operations["get_search_results_search__post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/graph-view/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Get Graph For File
     * @description Endpoint for graph view.
     *
     *     Input fields are:
     *
     *     ```
     *         {
     *           "filename": "",
     *           "score": 0,
     *           "par_length": 0,
     *           "target_collection": []
     *         }
     *     ```
     *
     *     The "target_collection" input comes from a dropdown list that lists collections only.
     *     This comes from the `/menus/graphcollections/` endpoint. It is possible to choose
     *     more than one option, hence it is a list. F.i.
     *
     *     ```
     *         ...
     *         "target_collection": ["Suttas-Early-1", "Vinaya"]
     *     ```
     *
     *     "score", "par_length" and "filename" are the same as for the other views.
     *
     *     Output is f.i.:
     *
     *     ```
     *         {
     *           "piegraphdata": [
     *             [
     *               "dn Dīghanikāya",
     *               "62063"
     *             ],
     *             [
     *               "mn Majjhimanikāya",
     *               "54783"
     *             ],
     *             [
     *               "an Aṅguttaranikāya",
     *               "24871"
     *             ],
     *
     *             ...
     *
     *             ]
     *           ],
     *           "histogramgraphdata": [
     *             [
     *               "Kūṭadanta Sutta (Dn 5)",
     *               "36982"
     *             ],
     *             [
     *               "Caṅkī Sutta (Mn 95)",
     *               "19661"
     *             ],
     *             [
     *               "Bhesajjakkhandhaka (Pli-tv-kd 6)",
     *               "7773"
     *             ],
     *             etc.
     *     ```
     *
     *     If the histogramgraphdata is null, it means that the dataset is too large to display the histogram.
     *     Please display a message asking the user to use the filters to reduce the dataset size.
     */
    post: operations["get_graph_for_file_graph_view__post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/table-view/table": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Get Table View
     * @description Endpoint for the table view. Accepts filters.
     *     :return: List of segments and parallels for the table view.
     */
    post: operations["get_table_view_table_view_table_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/table-view/download": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Get Table Download
     * @description Endpoint for the download table. Accepts filters.
     *     :return: List of segments and parallels for the downloaded table view.
     */
    post: operations["get_table_download_table_view_download_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/text-view/middle/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Get Parallels For Middle
     * @description :return: List of parallels for text view (middle)
     */
    post: operations["get_parallels_for_middle_text_view_middle__post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/text-view/text-parallels/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Get File Text Segments And Parallels
     * @description Endpoint for text view. Returns preformatted text segments and ids of the corresponding parallels.
     */
    post: operations["get_file_text_segments_and_parallels_text_view_text_parallels__post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/numbers-view/numbers/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Get Numbers View
     * @description Endpoint for numbers view.
     */
    post: operations["get_numbers_view_numbers_view_numbers__post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/numbers-view/categories/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Categories For Numbers View
     * @description Endpoint that returns list of categories for the given language
     */
    get: operations["get_categories_for_numbers_view_numbers_view_categories__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/links/external/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get External Links
     * @description Returns the external links for a given filename or segmentnr.
     */
    get: operations["get_external_links_links_external__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/utils/count-matches/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Get Counts For File
     * @description Returns number of filtered parallels
     */
    post: operations["get_counts_for_file_utils_count_matches__post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/utils/folios/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Folios For File
     * @description Returns number of folios (TIB) / facsimiles (CHN) /
     *     suttas/PTS nrs/segments (PLI) / segments (SKT)
     */
    get: operations["get_folios_for_file_utils_folios__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/utils/displayname/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Displayname For Segmentnr
     * @description Returns the displayname for a given segmentnr
     */
    get: operations["get_displayname_for_segmentnr_utils_displayname__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/utils/available-languages/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Multilingual
     * @description Returns a list of the available languages of matches for the given file.
     */
    get: operations["get_multilingual_utils_available_languages__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/menus/metadata/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Data For Sidebar Menu
     * @description Endpoint for Metadata, formerly known as the sidebar menu.
     */
    get: operations["get_data_for_sidebar_menu_menus_metadata__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/menus/graphcollections/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Categories For Filter Menu
     * @description Given a language, return list of collections for the filter menu
     *     of graph view and the input menus of the visual view.
     *
     *     Input is the language string like "pli".
     *     Output is:
     *
     *     ```
     *         {
     *           "result": [
     *             {
     *               "collection": "pli_Suttas-Early-1",
     *               "collectiondisplayname": "Suttas-Early-1"
     *             },
     *             {
     *               "collection": "pli_Suttas-Early-2",
     *               "collectiondisplayname": "Suttas-Early-2"
     *             },
     *             etc.
     *     ```
     *
     *     Where "collection" is the value that needs to be returns to the backend once
     *     selected and "collectiondisplayname" is what displays in the dropdown menu:
     *
     *     ```
     *         Suttas-Early-1
     *         Suttas-Early-2
     *         Suttas-Late-1
     *         etc.
     *
     *     ```
     */
    get: operations["get_categories_for_filter_menu_menus_graphcollections__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Root
     * @description Root API endpoint
     *     :return: The response (json object)
     */
    get: operations["root__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** Category */
    Category: {
      /** Category */
      category: string;
      /** Categorydisplayname */
      categorydisplayname: string;
      /** Files */
      files: components["schemas"]["File"][];
    };
    /** Collection */
    Collection: {
      /** Collection */
      collection: string;
      /** Collectiondisplayname */
      collectiondisplayname: string;
      /** Categories */
      categories: components["schemas"]["Category"][];
    };
    /** CountMatchesInput */
    CountMatchesInput: {
      /**
       * Filename
       * @default
       */
      filename: string;
      filters?: components["schemas"]["Filters"];
      /**
       * Score
       * @default 0
       */
      score: number;
      /**
       * Par Length
       * @default 0
       */
      par_length: number;
    };
    /** CountMatchesOutput */
    CountMatchesOutput: {
      /** Parallel Count */
      parallel_count: number;
    };
    /** DisplayNameOutput */
    DisplayNameOutput: {
      /** Displayname */
      displayname: unknown[];
    };
    /** File */
    File: {
      /** Displayname */
      displayName: string;
      /** Filename */
      filename: string;
      /** Category */
      category: string;
      /** Search Field */
      search_field: string;
    };
    /**
     * Filters
     * @description Filters for matches
     */
    Filters: {
      /**
       * Par Length
       * @default 0
       */
      par_length: number;
      /**
       * Score
       * @default 0
       */
      score: number;
      languages?: components["schemas"]["Languages"][];
      /**
       * Include Files
       * @default []
       */
      include_files: string[];
      /**
       * Exclude Files
       * @default []
       */
      exclude_files: string[];
      /**
       * Include Categories
       * @default []
       */
      include_categories: string[];
      /**
       * Exclude Categories
       * @default []
       */
      exclude_categories: string[];
      /**
       * Include Collections
       * @default []
       */
      include_collections: string[];
      /**
       * Exclude Collections
       * @default []
       */
      exclude_collections: string[];
    };
    /** FolioOutput */
    FolioOutput: {
      /** Folios */
      folios: unknown[];
    };
    /** FullMatchText */
    FullMatchText: {
      /** Text */
      text?: string;
      /**
       * Highlightcolor
       * @default 0
       */
      highlightColor: number;
      /**
       * Matches
       * @default []
       */
      matches: unknown[];
    };
    /** FullNames */
    FullNames: {
      /** Display Name */
      display_name?: string;
      /** Text Name */
      text_name?: string;
      /** Link1 */
      link1?: string;
      /** Link2 */
      link2?: string;
    };
    /** FullText */
    FullText: {
      /** Text */
      text?: string;
      /**
       * Highlightcolor
       * @default 0
       */
      highlightColor: number;
    };
    /** GeneralInput */
    GeneralInput: {
      /** Filename */
      filename: string;
      filters?: components["schemas"]["Filters"];
      /**
       * Page
       * @default 0
       */
      page: number;
      /**
       * Sort Method
       * @default position
       */
      sort_method: string;
      /**
       * Folio
       * @default
       */
      folio: string;
    };
    /** GraphCollection */
    GraphCollection: {
      /** Collection */
      collection: string;
      /** Collectiondisplayname */
      collectiondisplayname?: string;
    };
    /** GraphCollectionOutput */
    GraphCollectionOutput: {
      /** Result */
      result: components["schemas"]["GraphCollection"][];
    };
    /** GraphData */
    GraphData: {
      /** Piegraphdata */
      piegraphdata: (string | number)[][];
      /** Histogramgraphdata */
      histogramgraphdata?: (string | number)[][];
    };
    /** GraphInput */
    GraphInput: {
      /**
       * Filename
       * @default
       */
      filename: string;
      /**
       * Score
       * @default 0
       */
      score: number;
      /**
       * Par Length
       * @default 0
       */
      par_length: number;
      /**
       * Target Collection
       * @default []
       */
      target_collection: string[];
    };
    /** GraphViewOutput */
    GraphViewOutput: components["schemas"]["GraphData"];
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** LanguageOutput */
    LanguageOutput: {
      /** Langlist */
      langList: unknown[];
    };
    /**
     * Languages
     * @description An enumeration.
     * @enum {string}
     */
    Languages: "all" | "bo" | "sa" | "pa" | "zh";
    /** LinksOutput */
    LinksOutput: {
      /** Bdrc */
      bdrc: string;
      /** Rkts */
      rkts: string;
      /** Gretil */
      gretil: string;
      /** Dsbc */
      dsbc: string;
      /** Cbeta */
      cbeta: string;
      /** Suttacentral */
      suttacentral: string;
      /** Cbc */
      cbc: string;
      /** Vri */
      vri: string;
    };
    /** MenuItem */
    MenuItem: {
      /** Id */
      id: string;
      /** Displayname */
      displayName: string;
    };
    /** MenuOutput */
    MenuOutput: components["schemas"]["MenuItem"][];
    /** MetadataOutput */
    MetadataOutput: {
      /** Metadata */
      metadata: components["schemas"]["Collection"][];
    };
    /** NumbersViewOutput */
    NumbersViewOutput: components["schemas"]["api__endpoints__models__numbers_view_models__Segment"][];
    /** Parallel */
    Parallel: {
      /** Segmentnr */
      segmentnr?: string;
      /** Displayname */
      displayName?: string;
      /** Filename */
      fileName?: string;
      /** Category */
      category?: string;
    };
    /** SearchInput */
    SearchInput: {
      /** Search String */
      search_string: string;
      /**
       * Language
       * @default
       */
      language: string;
      filters?: components["schemas"]["Filters"];
    };
    /** SearchOutput */
    SearchOutput: {
      /** Searchresults */
      searchResults: components["schemas"]["SearchResults"][];
    };
    /** SearchResults */
    SearchResults: {
      /** Category */
      category: string;
      /** Language */
      language: string;
      /** Segment Nr */
      segment_nr: string;
      full_names: components["schemas"]["FullNames"];
      /** Similarity */
      similarity: number;
      /** Segtext */
      segtext: components["schemas"]["FullText"][];
    };
    /** TableDownloadInput */
    TableDownloadInput: {
      /** Filename */
      filename: string;
      filters?: components["schemas"]["Filters"];
      /**
       * Page
       * @default 0
       */
      page: number;
      /**
       * Sort Method
       * @default position
       */
      sort_method: string;
      /**
       * Folio
       * @default
       */
      folio: string;
      /** Download Data */
      download_data: string;
    };
    /** TextItemNew */
    TextItemNew: {
      /** Segnr */
      segnr: string;
      /** Segtext */
      segtext: components["schemas"]["FullMatchText"][];
    };
    /** TextParallelsInput */
    TextParallelsInput: {
      /** Filename */
      filename: string;
      /**
       * Folio
       * @default
       */
      folio: string;
      /**
       * Active Segment
       * @default none
       */
      active_segment: string;
      filters?: components["schemas"]["Filters"];
      /**
       * Page Number
       * @default 0
       */
      page_number: number;
    };
    /** TextViewLeftOutputV2 */
    TextViewLeftOutputV2: {
      /** Page */
      page: number;
      /** Total Pages */
      total_pages: number;
      /** Items */
      items: components["schemas"]["TextItemNew"][];
    };
    /** TextViewMiddleInput */
    TextViewMiddleInput: {
      /** Parallel Ids */
      parallel_ids: unknown[];
    };
    /** TextViewMiddleOutput */
    TextViewMiddleOutput: components["schemas"]["api__endpoints__models__text_view_models__Segment"][];
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** Segment */
    api__endpoints__models__numbers_view_models__Segment: {
      /** Segmentnr */
      segmentnr: string;
      /** Parallels */
      parallels: components["schemas"]["Parallel"][];
    };
    /** Segment */
    api__endpoints__models__text_view_models__Segment: {
      /** Par Segnr Range */
      par_segnr_range: string;
      /** Display Name */
      display_name?: string;
      /** Tgt Lang */
      tgt_lang: string;
      /** Par Offset Beg */
      par_offset_beg?: number;
      /** Par Offset End */
      par_offset_end?: number;
      /**
       * Par Segtext
       * @default []
       */
      par_segtext: unknown[];
      /** Filename */
      filename: string;
      /** Score */
      score: number;
      /** Length */
      length: number;
      /** Par Fulltext */
      par_fulltext?: components["schemas"]["FullText"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  get_search_results_search__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SearchInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["SearchOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_graph_for_file_graph_view__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GraphInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["GraphViewOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_table_view_table_view_table_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GeneralInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_table_download_table_view_download_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TableDownloadInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_parallels_for_middle_text_view_middle__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TextViewMiddleInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["TextViewMiddleOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_file_text_segments_and_parallels_text_view_text_parallels__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TextParallelsInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["TextViewLeftOutputV2"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_numbers_view_numbers_view_numbers__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GeneralInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["NumbersViewOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_categories_for_numbers_view_numbers_view_categories__get: {
    parameters: {
      query: {
        /** @description Filename to be used */
        filename: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["MenuOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_external_links_links_external__get: {
    parameters: {
      query: {
        filename: string;
        segmentnr?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["LinksOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_counts_for_file_utils_count_matches__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CountMatchesInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["CountMatchesOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_folios_for_file_utils_folios__get: {
    parameters: {
      query: {
        /** @description File name of the text for which folios should be fetched. */
        filename: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["FolioOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_displayname_for_segmentnr_utils_displayname__get: {
    parameters: {
      query: {
        /** @description Segmentnr for which the displayname should be fetched. */
        segmentnr: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["DisplayNameOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_multilingual_utils_available_languages__get: {
    parameters: {
      query: {
        /** @description File name of the text for which the available languages should be fetched. */
        filename: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["LanguageOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_data_for_sidebar_menu_menus_metadata__get: {
    parameters: {
      query: {
        /** @description language to be used */
        language: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["MetadataOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_categories_for_filter_menu_menus_graphcollections__get: {
    parameters: {
      query: {
        /** @description language to be used */
        language: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["GraphCollectionOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  root__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
