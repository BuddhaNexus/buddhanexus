/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/search/": {
    /**
     * Get Search Results
     * @description Returns search results for given search string.
     * :return: List of search results
     */
    post: operations["get_search_results_search__post"];
  };
  "/graph-view/": {
    /**
     * Get Graph For File
     * @description Endpoint for graph view
     */
    post: operations["get_graph_for_file_graph_view__post"];
  };
  "/visual-view/": {
    /**
     * Get Visual View For File
     * @description Endpoint for visual view
     */
    get: operations["get_visual_view_for_file_visual_view__get"];
  };
  "/table-view/table": {
    /**
     * Get Table View
     * @description Endpoint for the table view. Accepts filters.
     * :return: List of segments and parallels for the table view.
     */
    post: operations["get_table_view_table_view_table_post"];
  };
  "/table-view/download": {
    /**
     * Get Table Download
     * @description Endpoint for the download table. Accepts filters.
     * :return: List of segments and parallels for the downloaded table view.
     */
    post: operations["get_table_download_table_view_download_post"];
  };
  "/table-view/multilang": {
    /**
     * Get Multilang
     * @description Endpoint for the multilingual table view. Accepts Parallel languages
     * :return: List of segments and parallels for the table view.
     */
    post: operations["get_multilang_table_view_multilang_post"];
  };
  "/text-view/middle/": {
    /**
     * Get Parallels For Middle
     * @description :return: List of parallels for text view (middle)
     */
    post: operations["get_parallels_for_middle_text_view_middle__post"];
  };
  "/text-view/text-parallels/": {
    /**
     * Get File Text Segments And Parallels
     * @description Endpoint for text view. Returns preformatted text segments and ids of the corresponding parallels.
     */
    post: operations["get_file_text_segments_and_parallels_text_view_text_parallels__post"];
  };
  "/numbers-view/numbers": {
    /**
     * Get Numbers View
     * @description Endpoint for numbers view. Input parameters are the same as for table view.
     */
    post: operations["get_numbers_view_numbers_view_numbers_post"];
  };
  "/links/external/": {
    /**
     * Get External Links
     * @description Returns the external links for a given file_name or segmentnr.
     */
    get: operations["get_external_links_links_external__get"];
  };
  "/utils/count-matches/": {
    /**
     * Get Counts For File
     * @description Returns number of filtered parallels
     */
    post: operations["get_counts_for_file_utils_count_matches__post"];
  };
  "/utils/folios/": {
    /**
     * Get Folios For File
     * @description Returns number of folios (TIB) / facsimiles (CHN) /
     * suttas/PTS nrs/segments (PLI) / segments (SKT)
     */
    get: operations["get_folios_for_file_utils_folios__get"];
  };
  "/utils/displayname/": {
    /**
     * Get Displayname For Segmentnr
     * @description Returns the displayname for a given segmentnr
     */
    get: operations["get_displayname_for_segmentnr_utils_displayname__get"];
  };
  "/utils/sanskrittagger/": {
    /**
     * Tag Sanskrit
     * @description Stemming + Tagging for Sanskrit
     * :return: String with tagged Sanskrit
     */
    get: operations["tag_sanskrit_utils_sanskrittagger__get"];
  };
  "/utils/available-languages/": {
    /**
     * Get Multilingual
     * @description Returns a list of the available languages of matches for the given file.
     */
    get: operations["get_multilingual_utils_available_languages__get"];
  };
  "/menus/files/": {
    /**
     * Get Files For Menu
     * @description Endpoint that returns list of file IDs in a given language or
     * all files available in multilang if the language is multi.
     */
    get: operations["get_files_for_menu_menus_files__get"];
  };
  "/menus/filter/": {
    /**
     * Get Files For Filter Menu
     * @description Given a language, return list of files for the category menu
     */
    get: operations["get_files_for_filter_menu_menus_filter__get"];
  };
  "/menus/category/": {
    /**
     * Get Categories For Filter Menu
     * @description Given a language, return list of categories for the filter menu
     */
    get: operations["get_categories_for_filter_menu_menus_category__get"];
  };
  "/menus/collections/": {
    /**
     * Get All Collections
     * @description Returns list of all available collections.
     */
    get: operations["get_all_collections_menus_collections__get"];
  };
  "/menus/sidebar/": {
    /**
     * Get Data For Sidebar Menu
     * @description Endpoint for sidebar menu
     */
    get: operations["get_data_for_sidebar_menu_menus_sidebar__get"];
  };
  "/": {
    /**
     * Root
     * @description Root API endpoint
     * :return: The response (json object)
     */
    get: operations["root__get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** CountMatchesInput */
    CountMatchesInput: {
      /**
       * File Name
       * @default
       */
      file_name?: string;
      limits?: components["schemas"]["Limits"];
      /**
       * Score
       * @default 0
       */
      score?: number;
      /**
       * Par Length
       * @default 0
       */
      par_length?: number;
    };
    /** GeneralInput */
    GeneralInput: {
      /** File Name */
      file_name: string;
      /**
       * Score
       * @default 0
       */
      score?: number;
      /**
       * Par Length
       * @default 0
       */
      par_length?: number;
      limits?: components["schemas"]["Limits"];
      /**
       * Page
       * @default 0
       */
      page?: number;
      /**
       * Sort Method
       * @default parallels_sorted_by_src_pos
       */
      sort_method?: string;
      /**
       * Folio
       * @default
       */
      folio?: string;
    };
    /** GraphInput */
    GraphInput: {
      /**
       * File Name
       * @default
       */
      file_name?: string;
      /**
       * Score
       * @default 0
       */
      score?: number;
      /**
       * Par Length
       * @default 0
       */
      par_length?: number;
      /**
       * Target Collection
       * @default []
       */
      target_collection?: unknown[];
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /**
     * Limits
     * @description Limits for parallels
     */
    Limits: {
      /**
       * Category Include
       * @default []
       */
      category_include?: unknown[];
      /**
       * Category Exclude
       * @default []
       */
      category_exclude?: unknown[];
      /**
       * File Include
       * @default []
       */
      file_include?: unknown[];
      /**
       * File Exclude
       * @default []
       */
      file_exclude?: unknown[];
    };
    /** MiddleInput */
    MiddleInput: {
      /** Parallel Ids */
      parallel_ids: unknown[];
    };
    /** MultiLangInput */
    MultiLangInput: {
      /** File Name */
      file_name: string;
      /**
       * Score
       * @default 0
       */
      score?: number;
      /**
       * Multi Lingual
       * @default []
       */
      multi_lingual?: unknown[];
      /**
       * Page
       * @default 0
       */
      page?: number;
      /**
       * Folio
       * @default
       */
      folio?: string;
    };
    /** SearchInput */
    SearchInput: {
      /** Search String */
      search_string: string;
      limits?: components["schemas"]["Limits"];
    };
    /** TableDownloadInput */
    TableDownloadInput: {
      /** File Name */
      file_name: string;
      /**
       * Score
       * @default 0
       */
      score?: number;
      /**
       * Par Length
       * @default 0
       */
      par_length?: number;
      limits?: components["schemas"]["Limits"];
      /**
       * Page
       * @default 0
       */
      page?: number;
      /**
       * Sort Method
       * @default parallels_sorted_by_src_pos
       */
      sort_method?: string;
      /**
       * Folio
       * @default
       */
      folio?: string;
      /** Download Data */
      download_data: string;
    };
    /** TextParallelsInput */
    TextParallelsInput: {
      /**
       * File Name
       * @default
       */
      file_name?: string;
      /**
       * Active Segment
       * @default none
       */
      active_segment?: string;
      /**
       * Score
       * @default 0
       */
      score?: number;
      /**
       * Par Length
       * @default 0
       */
      par_length?: number;
      limits?: components["schemas"]["Limits"];
      /**
       * Multi Lingual
       * @default []
       */
      multi_lingual?: unknown[];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: string[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * Get Search Results
   * @description Returns search results for given search string.
   * :return: List of search results
   */
  get_search_results_search__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SearchInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Graph For File
   * @description Endpoint for graph view
   */
  get_graph_for_file_graph_view__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GraphInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Visual View For File
   * @description Endpoint for visual view
   */
  get_visual_view_for_file_visual_view__get: {
    parameters: {
      query: {
        searchterm: string;
        language: string;
        selected?: string[];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Table View
   * @description Endpoint for the table view. Accepts filters.
   * :return: List of segments and parallels for the table view.
   */
  get_table_view_table_view_table_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GeneralInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Table Download
   * @description Endpoint for the download table. Accepts filters.
   * :return: List of segments and parallels for the downloaded table view.
   */
  get_table_download_table_view_download_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TableDownloadInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Multilang
   * @description Endpoint for the multilingual table view. Accepts Parallel languages
   * :return: List of segments and parallels for the table view.
   */
  get_multilang_table_view_multilang_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MultiLangInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Parallels For Middle
   * @description :return: List of parallels for text view (middle)
   */
  get_parallels_for_middle_text_view_middle__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MiddleInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get File Text Segments And Parallels
   * @description Endpoint for text view. Returns preformatted text segments and ids of the corresponding parallels.
   */
  get_file_text_segments_and_parallels_text_view_text_parallels__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TextParallelsInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Numbers View
   * @description Endpoint for numbers view. Input parameters are the same as for table view.
   */
  get_numbers_view_numbers_view_numbers_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GeneralInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get External Links
   * @description Returns the external links for a given file_name or segmentnr.
   */
  get_external_links_links_external__get: {
    parameters: {
      query: {
        file_name: string;
        segmentnr?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Counts For File
   * @description Returns number of filtered parallels
   */
  get_counts_for_file_utils_count_matches__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CountMatchesInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Folios For File
   * @description Returns number of folios (TIB) / facsimiles (CHN) /
   * suttas/PTS nrs/segments (PLI) / segments (SKT)
   */
  get_folios_for_file_utils_folios__get: {
    parameters: {
      query: {
        /** @description File name of the text for which folios should be fetched. */
        file_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Displayname For Segmentnr
   * @description Returns the displayname for a given segmentnr
   */
  get_displayname_for_segmentnr_utils_displayname__get: {
    parameters: {
      query: {
        /** @description Segmentnr for which the displayname should be fetched. */
        segmentnr: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Tag Sanskrit
   * @description Stemming + Tagging for Sanskrit
   * :return: String with tagged Sanskrit
   */
  tag_sanskrit_utils_sanskrittagger__get: {
    parameters: {
      query: {
        /** @description Sanskrit string to be tagged. */
        sanskrit_string: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Multilingual
   * @description Returns a list of the available languages of matches for the given file.
   */
  get_multilingual_utils_available_languages__get: {
    parameters: {
      query: {
        /** @description File name of the text for which the available languages should be fetched. */
        file_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Files For Menu
   * @description Endpoint that returns list of file IDs in a given language or
   * all files available in multilang if the language is multi.
   */
  get_files_for_menu_menus_files__get: {
    parameters: {
      query: {
        /** @description language to be used */
        language: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Files For Filter Menu
   * @description Given a language, return list of files for the category menu
   */
  get_files_for_filter_menu_menus_filter__get: {
    parameters: {
      query: {
        /** @description language to be used */
        language: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Categories For Filter Menu
   * @description Given a language, return list of categories for the filter menu
   */
  get_categories_for_filter_menu_menus_category__get: {
    parameters: {
      query: {
        /** @description language to be used */
        language: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get All Collections
   * @description Returns list of all available collections.
   */
  get_all_collections_menus_collections__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get Data For Sidebar Menu
   * @description Endpoint for sidebar menu
   */
  get_data_for_sidebar_menu_menus_sidebar__get: {
    parameters: {
      query: {
        /** @description language to be used */
        language: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Root
   * @description Root API endpoint
   * :return: The response (json object)
   */
  root__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
