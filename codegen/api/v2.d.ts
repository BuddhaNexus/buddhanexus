/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/search/": {
    /**
     * Get Search Results
     * @description Returns search results for given search string.
     * :return: List of search results
     */
    post: operations["get_search_results_search__post"];
  };
  "/graph-view/": {
    /**
     * Get Graph For File
     * @description Endpoint for graph view.
     *
     * Input fields are:
     *
     * ```
     *     {
     *       "file_name": "",
     *       "score": 0,
     *       "par_length": 0,
     *       "target_collection": []
     *     }
     * ```
     *
     * The "target_collection" input comes from a dropdown list that lists collections only.
     * This comes from the `/menus/graphcollections/` endpoint. It is possible to choose
     * more than one option, hence it is a list. F.i.
     *
     * ```
     *     ...
     *     "target_collection": ["pli_Suttas-Early-1", "pli_Vinaya"]
     * ```
     *
     * "score", "par_length" and "file_name" are the same as for the other views.
     *
     * Output is f.i.:
     *
     * ```
     *     {
     *       "piegraphdata": [
     *         [
     *           "dn Dīghanikāya",
     *           "62063"
     *         ],
     *         [
     *           "mn Majjhimanikāya",
     *           "54783"
     *         ],
     *         [
     *           "an Aṅguttaranikāya",
     *           "24871"
     *         ],
     *
     *         ...
     *
     *         ]
     *       ],
     *       "histogramgraphdata": [
     *         [
     *           "Kūṭadanta Sutta (Dn 5)",
     *           "36982"
     *         ],
     *         [
     *           "Caṅkī Sutta (Mn 95)",
     *           "19661"
     *         ],
     *         [
     *           "Bhesajjakkhandhaka (Pli-tv-kd 6)",
     *           "7773"
     *         ],
     *         etc.
     * ```
     */
    post: operations["get_graph_for_file_graph_view__post"];
  };
  "/visual-view/": {
    /**
     * Get Visual View
     * @description Endpoint for visual view.
     *
     * Input is as follows:
     *
     * ```
     *     {
     *       "inquiry_collection": "",
     *       "hit_collections": []
     *     }
     * ```
     *
     * "inquiry_collection" input comes from a dropdown list that lists collections only.
     * This comes from the `/menus/graphcollections/` endpoint.
     *
     * "hit_collections" also uses the same `/menus/graphcollections/` input but here it is
     * possible to choose more than one option, hence it is a list.
     *
     * F.i
     *
     * ```
     *     {
     *       "inquiry_collection": "pli_Suttas-Early-1",
     *       "hit_collections": ["pli_Suttas-Early-2"]
     *     }
     * ```
     *
     * Generates an output:
     *
     * ```
     *     [
     *       [
     *         "Dīghanikāya (dn)",
     *         "Khuddakapāṭha (kp)",
     *         "49864"
     *       ],
     *       [
     *         "Dīghanikāya (dn)",
     *         "Dhammapada (dhp)",
     *         "52645"
     *       ],
     *       etc.
     * ```
     *
     * When the first sankey-chart is generated, you can click on the collections on the left
     * top open them. The "hit_collections" remain the same but the "inquiry_collection" changes
     * to the value of the clicked item (between brackets). F.i. in the above example, clicking on
     * "Dīghanikāya (dn)" will generate the request for:
     *
     * ```
     *     {
     *       "inquiry_collection": "dn",
     *       "hit_collections": ["pli_Suttas-Early-2"]
     *     }
     * ```
     *
     * Which outputs:
     *
     * ```
     *     [
     *       [
     *         "Brahmajāla Sutta (dn1)",
     *         "Khuddakapāṭha (kp)",
     *         "55916"
     *       ],
     *       [
     *         "Brahmajāla Sutta (dn1)",
     *         "Udāna (ud)",
     *         "57381"
     *       ],
     *       etc.
     * ```
     *
     * The sankey-chart is then updated with the new data.
     *
     * Then clicking on "Brahmajāla Sutta (dn1)" generates the request for:
     *
     * ```
     *     {
     *       "inquiry_collection": "dn1",
     *       "hit_collections": ["pli_Suttas-Early-2"]
     *     }
     * ```
     *
     * Which provides the next dataset for the new updated sankey-chart.
     *
     * When then clicking on "Brahmajāla Sutta (dn1)" again opens the file "dn1" in
     * text-view mode.
     */
    post: operations["get_visual_view_visual_view__post"];
  };
  "/table-view/table/": {
    /**
     * Get Table View
     * @description Endpoint for the table view. Accepts filters.
     * :return: List of segments and parallels for the table view.
     */
    post: operations["get_table_view_table_view_table__post"];
  };
  "/table-view/download/": {
    /**
     * Get Table Download
     * @description Endpoint for the download table. Accepts filters.
     * :return: List of segments and parallels for the downloaded table view.
     */
    post: operations["get_table_download_table_view_download__post"];
  };
  "/text-view/middle/": {
    /**
     * Get Parallels For Middle
     * @description :return: List of parallels for text view (middle)
     */
    post: operations["get_parallels_for_middle_text_view_middle__post"];
  };
  "/text-view/text-parallels/": {
    /**
     * Get File Text Segments And Parallels
     * @description Endpoint for text view. Returns preformatted text segments and ids of the corresponding parallels.
     */
    post: operations["get_file_text_segments_and_parallels_text_view_text_parallels__post"];
  };
  "/numbers-view/numbers/": {
    /**
     * Get Numbers View
     * @description Endpoint for numbers view.
     */
    post: operations["get_numbers_view_numbers_view_numbers__post"];
  };
  "/numbers-view/categories/": {
    /**
     * Get Categories For Numbers View
     * @description Endpoint that returns list of categories for the given language
     */
    get: operations["get_categories_for_numbers_view_numbers_view_categories__get"];
  };
  "/links/external/": {
    /**
     * Get External Links
     * @description Returns the external links for a given file_name or segmentnr.
     */
    get: operations["get_external_links_links_external__get"];
  };
  "/utils/count-matches/": {
    /**
     * Get Counts For File
     * @description Returns number of filtered parallels
     */
    post: operations["get_counts_for_file_utils_count_matches__post"];
  };
  "/utils/folios/": {
    /**
     * Get Folios For File
     * @description Returns number of folios (TIB) / facsimiles (CHN) /
     * suttas/PTS nrs/segments (PLI) / segments (SKT)
     */
    get: operations["get_folios_for_file_utils_folios__get"];
  };
  "/utils/displayname/": {
    /**
     * Get Displayname For Segmentnr
     * @description Returns the displayname for a given segmentnr
     */
    get: operations["get_displayname_for_segmentnr_utils_displayname__get"];
  };
  "/utils/sanskrittagger/": {
    /**
     * Tag Sanskrit
     * @description IS THIS FUNCTION BEING USED?
     * Stemming + Tagging for Sanskrit
     * :return: String with tagged Sanskrit
     */
    get: operations["tag_sanskrit_utils_sanskrittagger__get"];
  };
  "/utils/available-languages/": {
    /**
     * Get Multilingual
     * @description Returns a list of the available languages of matches for the given file.
     */
    get: operations["get_multilingual_utils_available_languages__get"];
  };
  "/menus/files/": {
    /**
     * Get Files For Menu
     * @description Endpoint that returns list of file IDs in a given language or
     * all files available in multilang if the language is multi.
     */
    get: operations["get_files_for_menu_menus_files__get"];
  };
  "/menus/filter/": {
    /**
     * Get Files For Filter Menu
     * @description Given a language, return list of files for the category menu
     */
    get: operations["get_files_for_filter_menu_menus_filter__get"];
  };
  "/menus/category/": {
    /**
     * Get Categories For Filter Menu
     * @description Given a language, return list of categories for the filter menu
     * in text view, table view and numbers view.
     *
     * Input is the language string like "pli".
     * Output is:
     *
     * ```
     *     {
     *       "categoryitems": [
     *         {
     *           "category": "pli_Suttas-Early-1",
     *           "categoryname": "SUTTAS-EARLY-1 (ALL)"
     *         },
     *         {
     *           "category": "dn",
     *           "categoryname": "• Dīghanikāya (DN)"
     *         },
     *         {
     *           "category": "mn",
     *           "categoryname": "• Majjhimanikāya (MN)"
     *         },
     *         etc.
     * ```
     *
     * Where "category" is the value that needs to be returns to the backend once
     * selected and "categoryname" is what displays in the dropdown menu:
     *
     * ```
     *     SUTTAS-EARLY-1 (ALL)
     *     • Dīghanikāya (DN)
     *     • Majjhimanikāya (MN)
     *     etc.
     *
     * ```
     */
    get: operations["get_categories_for_filter_menu_menus_category__get"];
  };
  "/menus/collections/": {
    /**
     * Get All Collections
     * @description Returns list of all available collections.
     */
    get: operations["get_all_collections_menus_collections__get"];
  };
  "/menus/sidebar/": {
    /**
     * Get Data For Sidebar Menu
     * @description Endpoint for sidebar menu
     */
    get: operations["get_data_for_sidebar_menu_menus_sidebar__get"];
  };
  "/menus/graphcollections/": {
    /**
     * Get Categories For Filter Menu
     * @description Given a language, return list of collections for the filter menu
     * of graph view and the input menus of the visual view.
     *
     * Input is the language string like "pli".
     * Output is:
     *
     * ```
     *     {
     *       "result": [
     *         {
     *           "collection": "pli_Suttas-Early-1",
     *           "collectiondisplayname": "Suttas-Early-1"
     *         },
     *         {
     *           "collection": "pli_Suttas-Early-2",
     *           "collectiondisplayname": "Suttas-Early-2"
     *         },
     *         etc.
     * ```
     *
     * Where "collection" is the value that needs to be returns to the backend once
     * selected and "collectiondisplayname" is what displays in the dropdown menu:
     *
     * ```
     *     Suttas-Early-1
     *     Suttas-Early-2
     *     Suttas-Late-1
     *     etc.
     *
     * ```
     */
    get: operations["get_categories_for_filter_menu_menus_graphcollections__get"];
  };
  "/": {
    /**
     * Root
     * @description Root API endpoint
     * :return: The response (json object)
     */
    get: operations["root__get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** AllCategories */
    AllCategories: {
      /** Categoryname */
      categoryname: string;
      /** Categorydisplayname */
      categorydisplayname: string;
      /** Files */
      files: components["schemas"]["AllFilesForCategory"][];
    };
    /** AllFilesForCategory */
    AllFilesForCategory: {
      /** File Name */
      file_name: string;
      /** Textname */
      textname: string;
      /** Displayname */
      displayname: string;
      /** Available Lang */
      available_lang?: string;
    };
    /** Category */
    Category: {
      /** Category */
      category?: string;
      /** Categoryname */
      categoryname?: string;
    };
    /** CategoryFiles */
    CategoryFiles: {
      /** Filename */
      filename: string;
      /** Categoryname */
      categoryname?: string;
      /** Displayname */
      displayname?: string;
      /** Search Field */
      search_field?: string;
    };
    /** CategoryOutput */
    CategoryOutput: {
      /** Categoryitems */
      categoryitems: components["schemas"]["Category"][];
    };
    /** Collection */
    Collection: {
      /** Collectionname */
      collectionname: string;
      /** Collectionlanguage */
      collectionlanguage: string;
      /** Collectionkey */
      collectionkey: string;
    };
    /** CollectionsOutput */
    CollectionsOutput: {
      /** Result */
      result: components["schemas"]["Collection"][];
    };
    /** CountMatchesInput */
    CountMatchesInput: {
      /**
       * File Name
       * @default
       */
      file_name?: string;
      limits?: components["schemas"]["Limits"];
      /**
       * Score
       * @default 0
       */
      score?: number;
      /**
       * Par Length
       * @default 0
       */
      par_length?: number;
    };
    /** CountMatchesOutput */
    CountMatchesOutput: {
      /** Parallel Count */
      parallel_count: number;
    };
    /** DisplayNameOutput */
    DisplayNameOutput: {
      /** Displayname */
      displayname: unknown[];
    };
    /** Files */
    Files: {
      /** Displayname */
      displayName: string;
      /** Textname */
      textname: string;
      /** Filename */
      filename: string;
      /** Category */
      category: string;
      /** Available Lang */
      available_lang?: string;
      /** Search Field */
      search_field: string;
    };
    /** FilesOutput */
    FilesOutput: {
      /** Results */
      results: components["schemas"]["Files"][];
    };
    /** FilterOutput */
    FilterOutput: {
      /** Filteritems */
      filteritems: components["schemas"]["CategoryFiles"][];
    };
    /** FolioOutput */
    FolioOutput: {
      /** Folios */
      folios: components["schemas"]["api__endpoints__models__utils_models__Segment"][];
    };
    /** FullMatchText */
    FullMatchText: {
      /** Text */
      text?: string;
      /**
       * Highlightcolor
       * @default 0
       */
      highlightColor?: number;
      /**
       * Matches
       * @default []
       */
      matches?: unknown[];
    };
    /** FullNames */
    FullNames: {
      /** Display Name */
      display_name?: string;
      /** Text Name */
      text_name?: string;
      /** Link1 */
      link1?: string;
      /** Link2 */
      link2?: string;
    };
    /** FullText */
    FullText: {
      /** Text */
      text?: string;
      /**
       * Highlightcolor
       * @default 0
       */
      highlightColor?: number;
    };
    /** GeneralInput */
    GeneralInput: {
      /** File Name */
      file_name: string;
      /**
       * Score
       * @default 0
       */
      score?: number;
      /**
       * Par Length
       * @default 0
       */
      par_length?: number;
      limits?: components["schemas"]["Limits"];
      /**
       * Page
       * @default 0
       */
      page?: number;
      /**
       * Sort Method
       * @default position
       */
      sort_method?: string;
      /**
       * Folio
       * @default
       */
      folio?: string;
    };
    /** GraphCollection */
    GraphCollection: {
      /** Collection */
      collection?: string;
      /** Collectiondisplayname */
      collectiondisplayname?: string;
    };
    /** GraphCollectionOutput */
    GraphCollectionOutput: {
      /** Result */
      result: components["schemas"]["GraphCollection"][];
    };
    /** GraphInput */
    GraphInput: {
      /**
       * File Name
       * @default
       */
      file_name?: string;
      /**
       * Score
       * @default 0
       */
      score?: number;
      /**
       * Par Length
       * @default 0
       */
      par_length?: number;
      /**
       * Target Collection
       * @default []
       */
      target_collection?: unknown[];
    };
    /** GraphViewOutput */
    GraphViewOutput: {
      /** Piegraphdata */
      piegraphdata: ((string | number)[])[];
      /** Histogramgraphdata */
      histogramgraphdata: ((string | number)[])[];
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** LanguageOutput */
    LanguageOutput: {
      /** Langlist */
      langList: unknown[];
    };
    /**
     * Limits
     * @description Limits for parallels
     */
    Limits: {
      /**
       * Category Include
       * @default []
       */
      category_include?: unknown[];
      /**
       * Category Exclude
       * @default []
       */
      category_exclude?: unknown[];
      /**
       * File Include
       * @default []
       */
      file_include?: unknown[];
      /**
       * File Exclude
       * @default []
       */
      file_exclude?: unknown[];
    };
    /** LinksOutput */
    LinksOutput: {
      /** Bdrc */
      bdrc: string;
      /** Rkts */
      rkts: string;
      /** Gretil */
      gretil: string;
      /** Dsbc */
      dsbc: string;
      /** Cbeta */
      cbeta: string;
      /** Suttacentral */
      suttacentral: string;
      /** Cbc */
      cbc: string;
      /** Vri */
      vri: string;
    };
    /** MenuItem */
    MenuItem: {
      /** Id */
      id: string;
      /** Displayname */
      displayName: string;
    };
    /** MenuOutput */
    MenuOutput: components["schemas"]["MenuItem"][];
    /** NumbersViewOutput */
    NumbersViewOutput: components["schemas"]["api__endpoints__models__numbers_view_models__Segment"][];
    /** Parallel */
    Parallel: {
      /** Segmentnr */
      segmentnr?: string;
      /** Displayname */
      displayName?: string;
      /** Filename */
      fileName?: string;
      /** Category */
      category?: string;
    };
    /** SearchInput */
    SearchInput: {
      /** Search String */
      search_string: string;
      /**
       * Language
       * @default
       */
      language?: string;
      limits?: components["schemas"]["Limits"];
    };
    /** SearchOutput */
    SearchOutput: {
      /** Searchresults */
      searchResults: components["schemas"]["SearchResults"][];
    };
    /** SearchResults */
    SearchResults: {
      /** Category */
      category: string;
      /** Language */
      language: string;
      /** Segment Nr */
      segment_nr: string;
      full_names: components["schemas"]["FullNames"];
      /** Similarity */
      similarity: number;
      /** Segtext */
      segtext: components["schemas"]["FullText"][];
    };
    /** SideBar */
    SideBar: {
      /** Collection */
      collection: string;
      /** Categories */
      categories: components["schemas"]["AllCategories"][];
    };
    /** SideBarOutput */
    SideBarOutput: {
      /** Navigationmenudata */
      navigationmenudata: components["schemas"]["SideBar"][];
    };
    /** TableDownloadInput */
    TableDownloadInput: {
      /** File Name */
      file_name: string;
      /**
       * Score
       * @default 0
       */
      score?: number;
      /**
       * Par Length
       * @default 0
       */
      par_length?: number;
      limits?: components["schemas"]["Limits"];
      /**
       * Page
       * @default 0
       */
      page?: number;
      /**
       * Sort Method
       * @default position
       */
      sort_method?: string;
      /**
       * Folio
       * @default
       */
      folio?: string;
      /** Download Data */
      download_data: string;
    };
    /** TableDownloadOutput */
    TableDownloadOutput: string;
    /** TableViewOutput */
    TableViewOutput: components["schemas"]["api__endpoints__models__table_view_models__Segment"][];
    /** TextItem */
    TextItem: {
      /** Segnr */
      segnr: string;
      /** Segtext */
      segtext: components["schemas"]["FullMatchText"][];
    };
    /** TextParallelsInput */
    TextParallelsInput: {
      /** File Name */
      file_name: string;
      /**
       * Active Segment
       * @default none
       */
      active_segment?: string;
      /**
       * Score
       * @default 0
       */
      score?: number;
      /**
       * Par Length
       * @default 0
       */
      par_length?: number;
      limits?: components["schemas"]["Limits"];
      /**
       * Multi Lingual
       * @default []
       */
      multi_lingual?: unknown[];
      /**
       * Page Number
       * @default 0
       */
      page_number?: number;
    };
    /** TextViewLeftOutput */
    TextViewLeftOutput: components["schemas"]["TextItem"][];
    /** TextViewMiddleInput */
    TextViewMiddleInput: {
      /** Parallel Ids */
      parallel_ids: unknown[];
    };
    /** TextViewMiddleOutput */
    TextViewMiddleOutput: components["schemas"]["api__endpoints__models__text_view_models__Segment"][];
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** VisualViewInput */
    VisualViewInput: {
      /**
       * Inquiry Collection
       * @default
       */
      inquiry_collection?: string;
      /**
       * Hit Collections
       * @default []
       */
      hit_collections?: unknown[];
    };
    /** VisualViewOutput */
    VisualViewOutput: ((string | number)[])[];
    /** Segment */
    api__endpoints__models__numbers_view_models__Segment: {
      /** Segmentnr */
      segmentnr: string;
      /** Parallels */
      parallels: components["schemas"]["Parallel"][];
    };
    /** Segment */
    api__endpoints__models__table_view_models__Segment: {
      /** Par Segnr Range */
      par_segnr_range: string;
      par_full_names: components["schemas"]["FullNames"];
      root_full_names: components["schemas"]["FullNames"];
      /** File Name */
      file_name: string;
      /** Root Segnr Range */
      root_segnr_range: string;
      /** Par Length */
      par_length: number;
      /** Root Length */
      root_length: number;
      /** Score */
      score: number;
      /** Src Lang */
      src_lang: string;
      /** Tgt Lang */
      tgt_lang: string;
      /**
       * Root Fulltext
       * @default []
       */
      root_fulltext?: components["schemas"]["FullText"][];
      /**
       * Par Fulltext
       * @default []
       */
      par_fulltext?: components["schemas"]["FullText"][];
    };
    /** Segment */
    api__endpoints__models__text_view_models__Segment: {
      /** Par Segnr Range */
      par_segnr_range: string;
      /** Display Name */
      display_name?: string;
      /** Tgt Lang */
      tgt_lang: string;
      /** Par Offset Beg */
      par_offset_beg?: number;
      /** Par Offset End */
      par_offset_end?: number;
      /**
       * Par Segtext
       * @default []
       */
      par_segtext?: unknown[];
      /** File Name */
      file_name: string;
      /** Score */
      score: number;
      /** Length */
      length: number;
      /** Par Fulltext */
      par_fulltext?: components["schemas"]["FullText"][];
    };
    /** Segment */
    api__endpoints__models__utils_models__Segment: {
      /** Num */
      num: string;
      /** Segment Nr */
      segment_nr: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get Search Results
   * @description Returns search results for given search string.
   * :return: List of search results
   */
  get_search_results_search__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SearchInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SearchOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Graph For File
   * @description Endpoint for graph view.
   *
   * Input fields are:
   *
   * ```
   *     {
   *       "file_name": "",
   *       "score": 0,
   *       "par_length": 0,
   *       "target_collection": []
   *     }
   * ```
   *
   * The "target_collection" input comes from a dropdown list that lists collections only.
   * This comes from the `/menus/graphcollections/` endpoint. It is possible to choose
   * more than one option, hence it is a list. F.i.
   *
   * ```
   *     ...
   *     "target_collection": ["pli_Suttas-Early-1", "pli_Vinaya"]
   * ```
   *
   * "score", "par_length" and "file_name" are the same as for the other views.
   *
   * Output is f.i.:
   *
   * ```
   *     {
   *       "piegraphdata": [
   *         [
   *           "dn Dīghanikāya",
   *           "62063"
   *         ],
   *         [
   *           "mn Majjhimanikāya",
   *           "54783"
   *         ],
   *         [
   *           "an Aṅguttaranikāya",
   *           "24871"
   *         ],
   *
   *         ...
   *
   *         ]
   *       ],
   *       "histogramgraphdata": [
   *         [
   *           "Kūṭadanta Sutta (Dn 5)",
   *           "36982"
   *         ],
   *         [
   *           "Caṅkī Sutta (Mn 95)",
   *           "19661"
   *         ],
   *         [
   *           "Bhesajjakkhandhaka (Pli-tv-kd 6)",
   *           "7773"
   *         ],
   *         etc.
   * ```
   */
  get_graph_for_file_graph_view__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GraphInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GraphViewOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Visual View
   * @description Endpoint for visual view.
   *
   * Input is as follows:
   *
   * ```
   *     {
   *       "inquiry_collection": "",
   *       "hit_collections": []
   *     }
   * ```
   *
   * "inquiry_collection" input comes from a dropdown list that lists collections only.
   * This comes from the `/menus/graphcollections/` endpoint.
   *
   * "hit_collections" also uses the same `/menus/graphcollections/` input but here it is
   * possible to choose more than one option, hence it is a list.
   *
   * F.i
   *
   * ```
   *     {
   *       "inquiry_collection": "pli_Suttas-Early-1",
   *       "hit_collections": ["pli_Suttas-Early-2"]
   *     }
   * ```
   *
   * Generates an output:
   *
   * ```
   *     [
   *       [
   *         "Dīghanikāya (dn)",
   *         "Khuddakapāṭha (kp)",
   *         "49864"
   *       ],
   *       [
   *         "Dīghanikāya (dn)",
   *         "Dhammapada (dhp)",
   *         "52645"
   *       ],
   *       etc.
   * ```
   *
   * When the first sankey-chart is generated, you can click on the collections on the left
   * top open them. The "hit_collections" remain the same but the "inquiry_collection" changes
   * to the value of the clicked item (between brackets). F.i. in the above example, clicking on
   * "Dīghanikāya (dn)" will generate the request for:
   *
   * ```
   *     {
   *       "inquiry_collection": "dn",
   *       "hit_collections": ["pli_Suttas-Early-2"]
   *     }
   * ```
   *
   * Which outputs:
   *
   * ```
   *     [
   *       [
   *         "Brahmajāla Sutta (dn1)",
   *         "Khuddakapāṭha (kp)",
   *         "55916"
   *       ],
   *       [
   *         "Brahmajāla Sutta (dn1)",
   *         "Udāna (ud)",
   *         "57381"
   *       ],
   *       etc.
   * ```
   *
   * The sankey-chart is then updated with the new data.
   *
   * Then clicking on "Brahmajāla Sutta (dn1)" generates the request for:
   *
   * ```
   *     {
   *       "inquiry_collection": "dn1",
   *       "hit_collections": ["pli_Suttas-Early-2"]
   *     }
   * ```
   *
   * Which provides the next dataset for the new updated sankey-chart.
   *
   * When then clicking on "Brahmajāla Sutta (dn1)" again opens the file "dn1" in
   * text-view mode.
   */
  get_visual_view_visual_view__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["VisualViewInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["VisualViewOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Table View
   * @description Endpoint for the table view. Accepts filters.
   * :return: List of segments and parallels for the table view.
   */
  get_table_view_table_view_table__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GeneralInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TableViewOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Table Download
   * @description Endpoint for the download table. Accepts filters.
   * :return: List of segments and parallels for the downloaded table view.
   */
  get_table_download_table_view_download__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TableDownloadInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TableDownloadOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Parallels For Middle
   * @description :return: List of parallels for text view (middle)
   */
  get_parallels_for_middle_text_view_middle__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TextViewMiddleInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TextViewMiddleOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get File Text Segments And Parallels
   * @description Endpoint for text view. Returns preformatted text segments and ids of the corresponding parallels.
   */
  get_file_text_segments_and_parallels_text_view_text_parallels__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TextParallelsInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TextViewLeftOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Numbers View
   * @description Endpoint for numbers view.
   */
  get_numbers_view_numbers_view_numbers__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GeneralInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["NumbersViewOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Categories For Numbers View
   * @description Endpoint that returns list of categories for the given language
   */
  get_categories_for_numbers_view_numbers_view_categories__get: {
    parameters: {
      query: {
        /** @description Filename to be used */
        file_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MenuOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get External Links
   * @description Returns the external links for a given file_name or segmentnr.
   */
  get_external_links_links_external__get: {
    parameters: {
      query: {
        file_name: string;
        segmentnr?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["LinksOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Counts For File
   * @description Returns number of filtered parallels
   */
  get_counts_for_file_utils_count_matches__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CountMatchesInput"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CountMatchesOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Folios For File
   * @description Returns number of folios (TIB) / facsimiles (CHN) /
   * suttas/PTS nrs/segments (PLI) / segments (SKT)
   */
  get_folios_for_file_utils_folios__get: {
    parameters: {
      query: {
        /** @description File name of the text for which folios should be fetched. */
        file_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FolioOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Displayname For Segmentnr
   * @description Returns the displayname for a given segmentnr
   */
  get_displayname_for_segmentnr_utils_displayname__get: {
    parameters: {
      query: {
        /** @description Segmentnr for which the displayname should be fetched. */
        segmentnr: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DisplayNameOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Tag Sanskrit
   * @description IS THIS FUNCTION BEING USED?
   * Stemming + Tagging for Sanskrit
   * :return: String with tagged Sanskrit
   */
  tag_sanskrit_utils_sanskrittagger__get: {
    parameters: {
      query: {
        /** @description Sanskrit string to be tagged. */
        sanskrit_string: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Multilingual
   * @description Returns a list of the available languages of matches for the given file.
   */
  get_multilingual_utils_available_languages__get: {
    parameters: {
      query: {
        /** @description File name of the text for which the available languages should be fetched. */
        file_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["LanguageOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Files For Menu
   * @description Endpoint that returns list of file IDs in a given language or
   * all files available in multilang if the language is multi.
   */
  get_files_for_menu_menus_files__get: {
    parameters: {
      query: {
        /** @description language to be used */
        language: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FilesOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Files For Filter Menu
   * @description Given a language, return list of files for the category menu
   */
  get_files_for_filter_menu_menus_filter__get: {
    parameters: {
      query: {
        /** @description language to be used */
        language: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FilterOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Categories For Filter Menu
   * @description Given a language, return list of categories for the filter menu
   * in text view, table view and numbers view.
   *
   * Input is the language string like "pli".
   * Output is:
   *
   * ```
   *     {
   *       "categoryitems": [
   *         {
   *           "category": "pli_Suttas-Early-1",
   *           "categoryname": "SUTTAS-EARLY-1 (ALL)"
   *         },
   *         {
   *           "category": "dn",
   *           "categoryname": "• Dīghanikāya (DN)"
   *         },
   *         {
   *           "category": "mn",
   *           "categoryname": "• Majjhimanikāya (MN)"
   *         },
   *         etc.
   * ```
   *
   * Where "category" is the value that needs to be returns to the backend once
   * selected and "categoryname" is what displays in the dropdown menu:
   *
   * ```
   *     SUTTAS-EARLY-1 (ALL)
   *     • Dīghanikāya (DN)
   *     • Majjhimanikāya (MN)
   *     etc.
   *
   * ```
   */
  get_categories_for_filter_menu_menus_category__get: {
    parameters: {
      query: {
        /** @description language to be used */
        language: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CategoryOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get All Collections
   * @description Returns list of all available collections.
   */
  get_all_collections_menus_collections__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CollectionsOutput"];
        };
      };
    };
  };
  /**
   * Get Data For Sidebar Menu
   * @description Endpoint for sidebar menu
   */
  get_data_for_sidebar_menu_menus_sidebar__get: {
    parameters: {
      query: {
        /** @description language to be used */
        language: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SideBarOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Categories For Filter Menu
   * @description Given a language, return list of collections for the filter menu
   * of graph view and the input menus of the visual view.
   *
   * Input is the language string like "pli".
   * Output is:
   *
   * ```
   *     {
   *       "result": [
   *         {
   *           "collection": "pli_Suttas-Early-1",
   *           "collectiondisplayname": "Suttas-Early-1"
   *         },
   *         {
   *           "collection": "pli_Suttas-Early-2",
   *           "collectiondisplayname": "Suttas-Early-2"
   *         },
   *         etc.
   * ```
   *
   * Where "collection" is the value that needs to be returns to the backend once
   * selected and "collectiondisplayname" is what displays in the dropdown menu:
   *
   * ```
   *     Suttas-Early-1
   *     Suttas-Early-2
   *     Suttas-Late-1
   *     etc.
   *
   * ```
   */
  get_categories_for_filter_menu_menus_graphcollections__get: {
    parameters: {
      query: {
        /** @description language to be used */
        language: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GraphCollectionOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Root
   * @description Root API endpoint
   * :return: The response (json object)
   */
  root__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
